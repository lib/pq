// +build ignore

// Generate the table of OID values
// Run with 'go run gen.go'.
package main

import (
	"database/sql"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"

	_ "github.com/lib/pq"
)

type (
	oidInfo struct {
		oid     int
		name    string
		typname string
	}
)

func main() {
	datname := os.Getenv("PGDATABASE")
	sslmode := os.Getenv("PGSSLMODE")

	if datname == "" {
		os.Setenv("PGDATABASE", "pqgotest")
	}

	if sslmode == "" {
		os.Setenv("PGSSLMODE", "disable")
	}

	db, err := sql.Open("postgres", "")
	if err != nil {
		log.Fatal(err)
	}

	infos := make([]oidInfo, 0, 10)
	rows, err := db.Query(`
		SELECT typname, oid
		FROM pg_type WHERE oid < 10000
		ORDER BY oid;
	`)
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		var info oidInfo
		err = rows.Scan(&info.typname, &info.oid)
		if err != nil {
			log.Fatal(err)
		}
		info.name = strings.ToUpper(info.typname)

		infos = append(infos, info)
	}
	if err = rows.Err(); err != nil {
		log.Fatal(err)
	}

	cmd := exec.Command("gofmt")
	cmd.Stderr = os.Stderr
	w, err := cmd.StdinPipe()
	if err != nil {
		log.Fatal(err)
	}
	f, err := os.Create("types.go")
	if err != nil {
		log.Fatal(err)
	}
	cmd.Stdout = f
	err = cmd.Start()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Fprintln(w, "// generated by 'go run gen.go'; do not edit")
	fmt.Fprintln(w, "\npackage oid")
	fmt.Fprintln(w, "const (")
	for _, i := range infos {
		fmt.Fprintf(w, "T_%s Oid = %d\n", i.typname, i.oid)
	}
	fmt.Fprintln(w, ")")
	fmt.Fprintln(w)

	fmt.Fprintln(w, "var (")
	fmt.Fprintln(w, "NameMap = OidNameMap{")

	for _, i := range infos {
		fmt.Fprintf(w, "T_%s:\"%s\",\n", i.typname, i.name)
	}

	fmt.Fprintln(w, "}")
	fmt.Fprintln(w, ")")
	w.Close()
	cmd.Wait()
}
